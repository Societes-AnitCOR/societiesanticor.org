<meta charset="UTF-8">
<link href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
<script src="https://kit.fontawesome.com/e5a1c9ca3a.js" crossorigin="anonymous"></script>

<link href="https://fonts.googleapis.com/css2?family=Muli&display=swap" rel="stylesheet">

<style >

    .jumbotron-custom {
        background-color : #7DE7C1;
        padding: 1.5rem;
    }

    .jumbotron .title h1 {
        font-family: Muli;
        font-style: normal;
        font-weight: bold;
        font-size: 2rem;
        line-height: 2.5rem;
        color: white;
        text-align: center;
        margin-bottom: 3rem;
    }



    .searchBar {
        font-family: 'Muli', sans-serif;
        font-style: normal;
        font-weight: normal;
        font-size: 1rem;
        line-height: 1.5rem;

        color: #30384C;
    }

    .searchBar input[type="search"]:focus {
        border-color: rgba(10, 209, 189, 0.8);
        box-shadow: 0 1px 1px rgba(10, 209, 189, 0.075) inset, 0 0 8px rgba(10, 209, 189, 0.6);
    }

    input.searchBar-left {
        border-top-left-radius: 50rem!important;
        border-bottom-left-radius: 50rem!important;
        border-left: 3px solid #0AD1BD;
        border-top: 3px solid #0AD1BD;
        border-bottom: 3px solid #0AD1BD;
        border-right: 0px;
    }

    .searchBar .labels {
        position: relative;
        display: inline-block;
        width: 100%;
        height: 2rem;
    }

    .searchBar label {
        padding-left: 0.5rem;
        font-family: 'Muli', sans-serif;
        font-style: normal;
        font-weight: bold;
        font-size: 1rem;
        line-height: 1.5rem;
    }

    label.searchBar-left {
        position: absolute;
    }

    label.searchBar-right {
        margin-left: 50% ;
        position: absolute;
    }

    input.searchBar-right {
        border-top: 3px solid #0AD1BD;
        border-bottom: 3px solid #0AD1BD;
        border-top-right-radius: 50rem!important;
        border-bottom-right-radius: 50rem!important;
    }

    .searchBar .btn {
        background-color: #0AD1BD !important;
        border-radius: 50rem!important;
        border: 3px solid #0AD1BD !important;
        margin-left: -2.7rem;
        z-index: 4;
    }


    .companiesList {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
    }

    .companiesList a {
            text-decoration: none;
            color:rgba(0, 0, 0, 0.7);
    }

    .companiesList .card {
            margin-top: 30px;
            border : 0px;
    }

    .companiesList .card-img-top {
        width: 100%;
        height: 250px;
        background-size: contain;
        background-position: center center;
        background-repeat: no-repeat;
        background-image: url('../img/logo-generic.png');
        background-origin: content-box;
        padding : 1rem;
    }

    .companiesList .card .card-title {
        font-family: 'Muli', sans-serif;
        font-style: normal;
        font-weight: bold;
        font-size: 1rem;
        line-height: 2rem;
        text-transform: uppercase;  
    }

    .companiesList .card .city {
        font-size: 0.8rem;
        margin-left: 0.8rem;
        font-style: normal;
        font-weight: normal;
        text-transform: none; 
    }

    .companiesList .card .city i {
        margin-right: 0.1rem;
    }
    
    .companiesList .card .card-text  {
        font-family: 'Muli', sans-serif;
        font-style: normal;
        font-weight: normal;
        font-size: 1rem;
        line-height: 1.6rem;

        color: #929292;

    }

    .companiesList .card .badges .badge {
        margin: 0.25rem;
    }

    .companiesList .card .badge-branch  {
        color: #fff;
        background-color: #007bff;
    }

    .companiesList .card .badge-keyword  {
        color: #fff;
        background-color: #8BE3FF;
    }

</style>

<section class="jumbotron jumbotron-custom ">
    <div class="container-xl">
        <h1 class="display-3">JSON Search Example :</h3>
        <span class="lead">Version 0.3</span>
        <hr class="my-4">
        <div>
            <div class="title"><h1>Entreprises Engagés</h1></div> 
            <div class="searchBar">
                <div class="labels">
                    <label class="searchBar-left" for="search">Que recherchez-vous ?</label>
                    <label class="searchBar-right" for="search_location">Ou?</label>
                </div>
                <div class="input-group">
                    <input class="form-control py-2 searchBar-left" type="search" id="search" placeholder="Gel, Blouses, Télémédecine, Développeur..." oninput="update_filter()">
                    <input class="form-control py-2 searchBar-right " type="search" id="search_location" placeholder="Adresse, Ville, code postal..." oninput="update_filter()">
                    <span class="input-group-append">
                        <button class="btn" type="button">
                            <i class="fa fa-search"></i>
                        </button>
                    </span>
                </div>
            </div>
        </div>
     </div>
</section>

<section class="container-xl">
    <div class="companiesList row row-cols-1 row-cols-md-2 row-cols-lg-3 row-cols-xl-4" id='results' >
        <div class="col-auto  ">
            <div class="spinner-border " role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    </div>
</section>

<script src='https://cdnjs.cloudflare.com/ajax/libs/tabletop.js/1.5.1/tabletop.min.js'></script>
<script type='text/javascript'>

    // Google Sheets configuration
    var key = '1yCxNTeeG1py5qqTf2cHgZbk4njSPtzhc5XaTt3LB510'
    var sheet_name = 'processed'

    // Map Google Sheets fields to the fields produced by symfony
    //  + should help make integration easier
    //  ! Attention, fields with the prefix '_' do not exist *yet* in symfony, or at least not in the way they are used here
    const mapping = {
        // "symfony" : Google Sheets
            id : 'id',
            _branchName: "Secteur d'activite",
            name: 'Nom de la structure',
            telephone: 'Téléphone',
            logo: 'id',
            _logo: 'URL logo',
            contribution: 'Contribution',
            description: 'Objet de la structure',
            geographicPerimeter: 'Code postal',
            address: 'Adresse',
            postalCode: 'Code postal',
            city: 'Ville',
            _geolat: '_lat',
            _geolong: '_long',
            country: 'Pays',
            email: 'Adresse mail de contact',
            url_website: 'URL site',
            keywords: 'Mot-cle Contribution',
            complementaryInformations: 'Information complementaire',
            _kompass_id: 'Kompass ID',
        }

    // We're going to put the companies data here after extraction
    var data = [];

    
    // Get handles on elements in the page
    var results = document.getElementById('results')
    var search = document.getElementById('search')
    var search_location = document.getElementById('search_location')


    // Function to fetch google sheet data, we'll do this once everything is loaded
    function init_tabletop() {
        Tabletop.init({
            key: key,
            simpleSheet: false,
            callback: load_data  // Callback to process the data after it has been loaded
        })
    }
    window.addEventListener('DOMContentLoaded', init_tabletop)


    // Function to normalise text for searching
    function normalise_text(str) {
        return str
        .toLowerCase()  //case insensitive 
        .normalize("NFD").replace(/[\u0300-\u036f]/g, "")  // remove accents
        .trim();
    }

    // Function to update which company cards are visible based on the current filter
    function update_filter() {
        // Normalise the next
        var text = normalise_text(search.value)
        // Break up the text into to "terms" that must all be present
        search_terms = text.split(" ") 

        // Do the same as above, but with the location filtre
        var location = normalise_text(search_location.value)
        location_terms = location.split(" ") 

        // Lets filter out the companies!
        data.forEach(d => {

            if (   text === '' // No "text" filtre is present
                || search_terms.every( (term) => d.searchable.includes(term)))
            {
                if (   location === ''  // No location Filter is present
                    || location_terms.every( (term) => d.searchable_location.includes(term)))
                {
                    // Make this card visible
                    d.card.classList.remove("d-none");   
                    return
                }
            }

            // This company card is not wanted, hide it!
            d.card.classList.add("d-none");   
        })

    }

    // Data processing function called once the Google Sheet has been loaded
    //   called by init_tabletop
    function load_data(sheets) {

        console.log(sheets)
        d = sheets[sheet_name].all()

        // Clear the target array
        data = [];

        const getField = (row, field) => {
            const value = ((row[mapping[field]] || ' ') + ' ').trim()
            if (field === 'logo') {
                return 'auto_' + value + '.png'
            } else {
                return value ;
            }
        }

        // Apply the mapping
        d.forEach((row) => {

            let company = {}
            for (const field in mapping) {
                company[field] = getField(row, field)
            }
            
            data.push(company)
        })

        // Clear the DOM 
        results.innerHTML= ""

        // Render each company card
        data.forEach(d => {

            // Generate the searchable text
            searchable =    d.name 
                    + ' ' + d._branchName 
                    + ' ' + d.description
                    + ' ' + d.contribution
                    + ' ' + d.complementaryInformations
            d.searchable = normalise_text(searchable)

            // Generate the searchable location text
            searchable_location =   d.address
                            + ' ' + d.postalCode 
                            + ' ' + d.city
            d.searchable_location = normalise_text(searchable_location)

            // Create this companies card
            const card = document.createElement('div');
            card.setAttribute('class', 'col ');
            card.setAttribute('id', 'card_'+ d['id']);
            d.card = card
            card.innerHTML = `
                <div class="card h-100" id="company-card-` + d.id + `">
                    <div class="backgroundCard card-img-top " style="background-image:url(` + d._logo + `); height:200px">
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">` + d.name + `<span class="city"> <i class="fas fa-map-marker-alt"></i> ` + d.city + ` - ` + d.postalCode + `</span></h5>
                        <p class="card-text">` + d.contribution + `</p>
                        <div class="badges"><span class="badge badge-branch">` + d._branchName + `</span><span class="badge badge-keyword">` + d.keywords + `</span></div>
                    </div>
                </div>
                `
            // Add this card to the Window DOM
            results.appendChild(card)
        });
    }
    
</script>
